package org.example.processing

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.Message
import com.github.kotlintelegrambot.network.fold
import kotlinx.coroutines.*
import org.example.state.UserRepository
import org.example.utils.OPERATOR_CHAT_ID
import org.slf4j.LoggerFactory

class BroadcastService(
    private val userRepository: UserRepository,
) {
    private val logger = LoggerFactory.getLogger(javaClass)
    private val scope = CoroutineScope(SupervisorJob() + Dispatchers.IO)

    fun startBroadcast(messageToBroadcast: Message, bot: Bot) {
        val operatorChatId = messageToBroadcast.chat.id
        val userIds = userRepository.getAllUserIds().filter { it != operatorChatId }

        if (userIds.isEmpty()) {
            logger.warn("–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–æ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            bot.sendMessage(ChatId.fromId(operatorChatId), "–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        }

        logger.info("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è {} –¥–ª—è {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", messageToBroadcast.messageId, userIds.size)
        bot.sendMessage(ChatId.fromId(operatorChatId), "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${userIds.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        scope.launch {
            var successful = 0
            var failed = 0

            userIds.forEach { userId ->
                try {
                    bot.copyMessage(
                        chatId = ChatId.fromId(userId),
                        fromChatId = ChatId.fromId(messageToBroadcast.chat.id),
                        messageId = messageToBroadcast.messageId
                    ).fold(
                        { successful++ },
                        {
                            failed++
                            logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", userId, it.errorBody)
                        }
                    )
                    delay(50)
                } catch (e: Exception) {
                    failed++
                    logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId, e)
                }
            }
            val report = "üèÅ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n" +
                    "‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $successful\n" +
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å: $failed (–≤–µ—Ä–æ—è—Ç–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)"

            logger.info(report)
            bot.sendMessage(ChatId.fromId(operatorChatId), report)
        }
    }
}